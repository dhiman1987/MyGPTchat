# This workflow will build the MyGPTchat application
# Front end node js build
name: MyGPTchat CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-front-end:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.9.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - run: npm ci
      working-directory: ./frontend
    - run: npm run build --if-present
      working-directory: ./frontend
    - run: ./post-build.sh
      working-directory: ./frontend
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.3
      with:
        name: front-end-artifact
        path: ./frontend/dist
  
  build-back-end:
    runs-on: ubuntu-latest
    steps:

    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: 960375303011.dkr.ecr.ap-south-1.amazonaws.com
        ECR_REPOSITORY: mychat-aws-lambda-x86
        IMAGE_TAG: github-action
      working-directory: ./backend
      run: |
        docker build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


    
